% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/Recombinator.R
\name{dict_recombinators_maybe}
\alias{dict_recombinators_maybe}
\alias{RecombinatorMaybe}
\title{Recombinator Choosing Action Probabilistically}
\description{
\code{\link{Recombinator}} that chooses which operation to perform probabilistically. The \code{\link{Recombinator}} wraps two other \code{\link{Recombinator}}s given during construction,
and for each group of \verb{$n_indivs_in} individuals, the operation to perform is sampled: with probability \code{p} (hyperparameter), the \code{\link{Recombinator}} given to
the \code{recombinator} construction argument is applied, and with probability \code{p - 1} the one given to \code{recombinator_not} is applied.

The values of \verb{$n_indivs_in} and \verb{$n_indivs_out} is set to the corresponding values of the wrapped \code{\link{Recombinator}}s. Both \code{recombinator} and \code{recombinator_not}
must currently have the same respective \verb{$n_indivs_in} and \verb{$n_indivs_out} values.
}
\section{Hyperparameters}{

This operator has the hyperparameters of the \code{\link{Recombinator}}s that it wraps: The hyperparameters of the operator given to the \code{recombinator} construction argument
are prefixed with \code{"maybe."}, the hyperparameters of the operator given to the \code{recombinator_not} construction argument are prefixed with \code{"maybe_not."}.

Additional hyperparameters:
\itemize{
\item \code{p} :: \code{numeric(1)} \cr
Probability per group of \code{n_indivs_in} individuals with which to apply the operator given to the \code{recombinator} construction argument.
}
}

\section{Supported Operand Types}{


Supported \code{\link[paradox:Param]{Param}} classes are the set intersection of supported classes of \code{recombinator} and \code{recombinator_not}.
}

\section{Dictionary}{

This \code{\link{Recombinator}} can be created with the short access form \code{\link[=rec]{rec()}}
(\code{\link[=recs]{recs()}} to get a list), or through the the \link[mlr3misc:Dictionary]{dictionary}
\code{\link{dict_recombinators}} in the following way:\preformatted{# preferred:
rec("maybe", <recombinator> [, <recombinator_not>])
recs("maybe", <recombinator> [, <recombinator_not>])  # takes vector IDs, returns list of Recombinators

# long form:
dict_recombinators$get("maybe", <recombinator> [, <recombinator_not>])
}
}

\seealso{
Other recombinators: 
\code{\link{OperatorCombination}},
\code{\link{RecombinatorProxy}},
\code{\link{Recombinator}},
\code{\link{dict_recombinators_null}},
\code{\link{dict_recombinators_xounif}}

Other recombinator wrappers: 
\code{\link{OperatorCombination}},
\code{\link{RecombinatorProxy}}
}
\concept{recombinator wrappers}
\concept{recombinators}
\section{Super classes}{
\code{\link[miesmuschel:MiesOperator]{miesmuschel::MiesOperator}} -> \code{\link[miesmuschel:Recombinator]{miesmuschel::Recombinator}} -> \code{RecombinatorMaybe}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-new}{\code{RecombinatorMaybe$new()}}
\item \href{#method-prime}{\code{RecombinatorMaybe$prime()}}
\item \href{#method-clone}{\code{RecombinatorMaybe$clone()}}
}
}
\if{html}{
\out{<details open ><summary>Inherited methods</summary>}
\itemize{
\item \out{<span class="pkg-link" data-pkg="miesmuschel" data-topic="MiesOperator" data-id="operate">}\href{../../miesmuschel/html/MiesOperator.html#method-operate}{\code{miesmuschel::MiesOperator$operate()}}\out{</span>}
}
\out{</details>}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-new"></a>}}
\if{latex}{\out{\hypertarget{method-new}{}}}
\subsection{Method \code{new()}}{
Initialize the \code{RecombinatorMaybe} object.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{RecombinatorMaybe$new(recombinator, recombinator_not = NULL)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{recombinator}}{(\code{\link{Recombinator}})\cr
\code{\link{Recombinator}} to wrap. This operator gets run with probability \code{p} (Hyperparameter).\cr
The constructed object gets a \emph{clone} of this argument.}

\item{\code{recombinator_not}}{(\code{\link{Recombinator}})\cr
Another \code{\link{Recombinator}} to wrap. This operator runs when \code{recombinator} is not chosen. By
default, this is \code{\link{RecombinatorNull}}, i.e. no operation, with both \code{n_indivs_in} and \code{n_indivs_out} set
to match \code{recombinator}. This does not work when \code{recombinator} has \code{n_indivs_in < n_indivs_out}, in which
case this argument must be set explicitly.
With the default behaviour, the \code{RecombinatorMaybe} object applies the \code{recombinator} operation with probability \code{p}, and
no operation at all otherwise.\cr
The constructed object gets a \emph{clone} of this argument.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-prime"></a>}}
\if{latex}{\out{\hypertarget{method-prime}{}}}
\subsection{Method \code{prime()}}{
See \code{\link{MiesOperator}} method. Primes both this operator, as well as the wrapped operators
given to \code{recombinator} and \code{recombinator_not} during construction.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{RecombinatorMaybe$prime(param_set)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{param_set}}{(\code{\link[paradox:ParamSet]{ParamSet}})\cr
Passed to \code{\link{MiesOperator}}\verb{$prime()}.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
\link{invisible} \code{self}.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-clone"></a>}}
\if{latex}{\out{\hypertarget{method-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{RecombinatorMaybe$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
