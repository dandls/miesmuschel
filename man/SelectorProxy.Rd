% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/Selector.R
\name{SelectorProxy}
\alias{SelectorProxy}
\title{Proxy-Selectior that Selects According to its Hyperparameter}
\description{
Selector that performs the operation in its \code{operation} hyperparameter. This is useful, e.g., to make
\code{\link{OptimizerMies}}'s selection operations fully parametrizable.

Changes in the \code{operation} hyperparameter are only realized whenever \verb{$prime()} is called, so \verb{$prime()}
must be called every time when \code{operation} is changed, \emph{even if} the new hyperparameter value is already primed.
}
\section{Hyperparameters}{

\itemize{
\item \code{operation} :: \code{\link{Selector}}\cr
Operation to perform. Initialized to \code{\link{SelectorBest}}.
}
}

\section{Supported Operand Types}{


Supported \code{\link[paradox:Param]{Param}} classes are: \code{\link[paradox:ParamLgl]{ParamLgl}}, \code{\link[paradox:ParamInt]{ParamInt}}, \code{\link[paradox:ParamDbl]{ParamDbl}}, \code{\link[paradox:ParamFct]{ParamFct}}
}

\section{Dictionary}{

This \code{\link{Selector}} can be created with the short access form \code{\link[=sel]{sel()}}
(\code{\link[=sels]{sels()}} to get a list), or through the the \link[mlr3misc:Dictionary]{dictionary}
\code{\link{dict_selectors}} in the following way:\preformatted{# preferred:
sel("proxy")
sels("proxy")  # takes vector IDs, returns list of [`Selector`]s

# long form:
dict_selectors$get("proxy")
}
}

\seealso{
Other selectors: 
\code{\link{Selector}},
\code{\link{dict_selectors_best}},
\code{\link{dict_selectors_random}}
}
\concept{selector wrappers}
\concept{selectors}
\section{Super classes}{
\code{\link[miesmuschel:MiesOperator]{miesmuschel::MiesOperator}} -> \code{\link[miesmuschel:Selector]{miesmuschel::Selector}} -> \code{SelectorProxy}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-new}{\code{SelectorProxy$new()}}
\item \href{#method-prime}{\code{SelectorProxy$prime()}}
\item \href{#method-clone}{\code{SelectorProxy$clone()}}
}
}
\if{html}{
\out{<details open ><summary>Inherited methods</summary>}
\itemize{
\item \out{<span class="pkg-link" data-pkg="miesmuschel" data-topic="MiesOperator" data-id="operate">}\href{../../miesmuschel/html/MiesOperator.html#method-operate}{\code{miesmuschel::MiesOperator$operate()}}\out{</span>}
}
\out{</details>}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-new"></a>}}
\if{latex}{\out{\hypertarget{method-new}{}}}
\subsection{Method \code{new()}}{
Initialize the \code{SelectorProxy} object.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SelectorProxy$new()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-prime"></a>}}
\if{latex}{\out{\hypertarget{method-prime}{}}}
\subsection{Method \code{prime()}}{
See \code{\link{MiesOperator}} method. Primes both this operator, as well as the operator given to the \code{operation} hyperparameter.
This must be called whenever the \code{operation} hyperparameter changes, \emph{even if} the hyperparameter is already primed.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SelectorProxy$prime(param_set)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{param_set}}{(\code{\link[paradox:ParamSet]{ParamSet}})\cr
Passed to \code{\link{MiesOperator}}\verb{$prime()}.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
\link{invisible} \code{self}.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-clone"></a>}}
\if{latex}{\out{\hypertarget{method-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SelectorProxy$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
