% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/Recombinator.R
\name{RecombinatorProxy}
\alias{RecombinatorProxy}
\title{Proxy-Recombinator that Recombines According to its Hyperparameter}
\description{
Recombinator that performs the operation in its \code{operation} hyperparameter. This is useful, e.g., to make
\code{\link{OptimizerMies}}'s recombination operation fully parametrizable.

Changes in the \code{operation} hyperparameter are only realized whenever \verb{$prime()} is called, so \verb{$prime()}
must be called every time when \code{operation} is changed.
}
\section{Supported Operand Types}{


Supported \code{\link[paradox:Param]{Param}} classes are:
}

\section{Dictionary}{

This \code{\link{Recombinator}} can be created with the short access form \code{\link[=rec]{rec()}}
(\code{\link[=recs]{recs()}} to get a list), or through the the \link[mlr3misc:Dictionary]{dictionary}
\code{\link{dict_recombinators}} in the following way:\preformatted{# preferred:
rec("proxy")
recs("proxy")  # takes vector IDs, returns list of [`Recombinator`]s

# long form:
dict_recombinators$get("proxy")
}
}

\seealso{
Other recombinators: 
\code{\link{OperatorCombination}},
\code{\link{Recombinator}},
\code{\link{dict_recombinators_maybe}},
\code{\link{dict_recombinators_null}},
\code{\link{dict_recombinators_xounif}}

Other recombinator wrappers: 
\code{\link{OperatorCombination}},
\code{\link{dict_recombinators_maybe}}
}
\concept{recombinator wrappers}
\concept{recombinators}
\section{Super classes}{
\code{\link[miesmuschel:MiesOperator]{miesmuschel::MiesOperator}} -> \code{\link[miesmuschel:Recombinator]{miesmuschel::Recombinator}} -> \code{RecombinatorProxy}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-new}{\code{RecombinatorProxy$new()}}
\item \href{#method-prime}{\code{RecombinatorProxy$prime()}}
\item \href{#method-clone}{\code{RecombinatorProxy$clone()}}
}
}
\if{html}{
\out{<details open ><summary>Inherited methods</summary>}
\itemize{
\item \out{<span class="pkg-link" data-pkg="miesmuschel" data-topic="MiesOperator" data-id="operate">}\href{../../miesmuschel/html/MiesOperator.html#method-operate}{\code{miesmuschel::MiesOperator$operate()}}\out{</span>}
}
\out{</details>}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-new"></a>}}
\if{latex}{\out{\hypertarget{method-new}{}}}
\subsection{Method \code{new()}}{
Initialize the \code{RecombinatorProxy} object.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{RecombinatorProxy$new(n_indivs_in = 2, n_indivs_out = n_indivs_in)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-prime"></a>}}
\if{latex}{\out{\hypertarget{method-prime}{}}}
\subsection{Method \code{prime()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{RecombinatorProxy$prime(param_set)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-clone"></a>}}
\if{latex}{\out{\hypertarget{method-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{RecombinatorProxy$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
