% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/mies_methods.R
\name{mies_evaluate_offspring}
\alias{mies_evaluate_offspring}
\title{Evaluate Proposed Configurations Generated in a MIES Iteration}
\usage{
mies_evaluate_offspring(
  inst,
  offspring,
  fidelity_schedule = NULL,
  budget_id = NULL,
  survivor_budget = FALSE,
  step_fidelity = FALSE,
  monotonic = TRUE
)
}
\arguments{
\item{inst}{(\code{\link[bbotk:OptimInstance]{OptimInstance}})\cr
Optimization instance to evaluate.}

\item{offspring}{(\code{data.frame})\cr
Proposed configurations to be evaluated, must have columns named after the \code{inst}'s search space, minus \code{budget_id} if not \code{NULL}.}

\item{fidelity_schedule}{(\code{data.frame} | \code{NULL})\cr
\code{data.frame} with three columns \code{"generation"}, \code{"budget_new"}, \code{"budget_survivors"}, in that order. \code{"budget_new"} and \code{"budget_survivors"}
are atomic columns assigned to the \code{budget_id} component of \code{offspring}; which one is chosen depends on \code{survivor_budget}.
\code{"generation"} is an integer valued column, indicating the first generation at which a row is valid. At least one row with
\code{generation == 1} must be present.\cr
This value may be \code{NULL} if no multi-fidelity optimization is performed (the default).\cr
Note that the multifidelity functionality is experimental and the UI may change in the future.}

\item{budget_id}{(\code{character(1)} | \code{NULL})\cr
Budget component that is set to the value found in \code{fidelity_schedule} when doing multi-fidelity optimization. Should be \code{NULL}
when and only when \code{fidelity_schedule} is \code{NULL}.}

\item{survivor_budget}{(\code{logical(1)})\cr
When doing multi-fidelity optimization, determines which column of \code{fidelity_schedule} to use to determine the budget component value.\cr
Note that the multifidelity functionality is experimental and the UI may change in the future.}

\item{step_fidelity}{(\code{logical(1)})\cr
Whether to \emph{also} evaluate alive individuals from previous generations that have a budget value below the current \code{budget_survivors}.
Default \code{FALSE}. Ignored when \code{budget_id} and \code{fidelity_schedule} are \code{NULL}.\cr
Note that the multifidelity functionality is experimental and the UI may change in the future.}

\item{monotonic}{(\code{logical(1)})\cr
When \code{step_fidelity} is \code{TRUE}, then this indicates whether individuals should only ever be re-evaluated when fidelity would be increased.
Ignored when \code{step_fidelity} is \code{FALSE} or when \code{budget_id} and \code{fidelity_schedule} are \code{NULL}.\cr
Note that the multifidelity functionality is experimental and the UI may change in the future.}
}
\value{
\link{invisible} \code{\link[data.table:data.table]{data.table}}: the performance values returned when evaluating the \code{offspring} values
through \code{eval_batch}.
}
\description{
Calls \verb{$eval_batch} of a given \code{\link[bbotk:OptimInstance]{OptimInstance}} on a set
of configurations as part of a MIES operation. The \code{dob} extra-info in the archive
is also set properly to indicate a progressed generation.

This function can be used directly, but it is easier to use it within the \code{\link{OptimizerMies}}
\code{\link[bbotk:Optimizer]{Optimizer}} if standard GA operation is desired.

"Rolling-tide" multifidelity is supported as described in \code{\link{OptimizerMies}} or more thoroughly
in \code{vignette("mies-multifid")}. For this,
an extra component named after \code{budget_id} is appended to each individual, chosen from
the \code{fidelity_schedule} depending on the value of \code{survivor_budget}. Both \code{fidelity_schedule}
and \code{budget_id} should be the same values as given to the other \verb{mies_*} functions.
}
\examples{
library("bbotk")
lgr::threshold("warn")

# Define the objective to optimize
objective <- ObjectiveRFun$new(
  fun = function(xs) {
    z <- exp(-xs$x^2 - xs$y^2) + 2 * exp(-(2 - xs$x)^2 - (2 - xs$y)^2)
    list(Obj = z)
  },
  domain = ps(x = p_dbl(-2, 4), y = p_dbl(-2, 4)),
  codomain = ps(Obj = p_dbl(tags = "maximize"))
)

# Get a new OptimInstance
oi <- OptimInstanceSingleCrit$new(objective,
  terminator = trm("evals", n_evals = 100)
)

mies_init_population(inst = oi, mu = 3)
# Initial state:
oi$archive

# 'offspring' is just a data.frame of values to evaluate.
# In general it should be created using 'mies_generate_offspring()'.
offspring = data.frame(x = 1:2, y = 2:1)

mies_evaluate_offspring(oi, offspring = offspring)

# This evaluated the given points and assigned them 'dob' 2.
oi$archive

# Note that at this point one would ordinarily call a 'mies_survival_*()'
# function.

###
# Advanced demo, making use of additional components and fidelity_schedule
# Note that the multifidelity functionality is experimental and the UI may
# change in the future.
##

# declare 'y' the budget parameter. It does not occur in 'offspring' any more.
budget_id = "y"
# but: offspring may contain any other value that is appended to 'oi'. They
# are ignored by the objective.
offspring = data.frame(x = 0:1, z = 3)

fidelity_schedule = data.frame(
  generation = c(1, 5),
  budget_new = c(1, 2),
  budget_survivors = c(3, 4)
)
# The fidelity schedule:
fidelity_schedule

# When given a fidelity_schedule and budget_id, the 'budget_new' budget
# is used. Here it is '1', because the geeneration number 3 is being evaluated.
mies_evaluate_offspring(oi, offspring = offspring,
  fidelity_schedule = fidelity_schedule, budget_id = budget_id)

# This now has the additional column 'z'. Values of y for the new evaluations
# are 1.
oi$archive

# setting 'survivor_budget = TRUE' uses the 'budget_survivors' schedule column.
mies_evaluate_offspring(oi, offspring = offspring,
  fidelity_schedule = fidelity_schedule, budget_id = budget_id,
  survivor_budget = TRUE)

# the new row has y set to 2.
oi$archive

# When calling 'mies_evaluate_offspring()' with the same 'fidelity_schedule'
# now, then the generation 5 is evaluated. Therefore the next row of
# the schedule is used, and 'y' is therefore set to 2 (or 4, ir survivor budget
# is used).

mies_evaluate_offspring(oi, offspring = offspring,
  fidelity_schedule = fidelity_schedule, budget_id = budget_id)

oi$archive
# TODO example with step_fidelity = TRUE
}
\seealso{
Other mies building blocks: 
\code{\link{mies_generate_offspring}()},
\code{\link{mies_get_fitnesses}()},
\code{\link{mies_init_population}()},
\code{\link{mies_select_from_archive}()},
\code{\link{mies_step_fidelity}()},
\code{\link{mies_survival_comma}()},
\code{\link{mies_survival_plus}()}
}
\concept{mies building blocks}
